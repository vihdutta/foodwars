name: Build, Push, Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build & Push FoodWars App Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/foodwars-app:latest

  deploy:
    name: Deploy to AWS Lightsail
    runs-on: ubuntu-latest
    environment: production
    needs: build-and-push

    steps:
      - name: Deploy via SSH to Lightsail
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ vars.LIGHTSAIL_PUBLIC_IP }}
          username: ${{ vars.LIGHTSAIL_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          port: 22
          script: |
            #!/usr/bin/env bash
            set -euo pipefail

            DOMAIN_NAME="foodwars.vihdutta.com"

            # Install Docker Compose v2 if not already installed
            if ! docker compose version &>/dev/null; then
              echo "Installing Docker Compose v2..."
              sudo mkdir -p /usr/libexec/docker/cli-plugins
              sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 \
                -o /usr/libexec/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose
            fi

            # Create .env file
            cat > /home/${{ vars.LIGHTSAIL_USERNAME }}/.env << EOF
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            REDIS_URL=redis://redis:6379
            EOF

            # Create docker-compose.yml file
            cat > /home/${{ vars.LIGHTSAIL_USERNAME }}/docker-compose.yml << EOF
            version: '3.8'

            services:
              foodwars-app:
                image: ${{ vars.DOCKERHUB_USERNAME }}/foodwars-app:latest
                ports:
                  - "127.0.0.1:8080:8080"
                environment:
                  - REDIS_URL=redis://redis:6379
                env_file:
                  - .env
                depends_on:
                  - redis
                networks:
                  - foodwars-network
                restart: unless-stopped

              redis:
                image: redis:7-alpine
                networks:
                  - foodwars-network
                command: redis-server --appendonly no --save ""
                restart: unless-stopped

            networks:
              foodwars-network:
                driver: bridge
            EOF

            # Write reverse-proxy config
            sudo tee /etc/nginx/conf.d/${DOMAIN_NAME}.conf > /dev/null << EOF
            server {
                listen       80;
                server_name  ${DOMAIN_NAME} www.${DOMAIN_NAME};

                location = /healthz {
                  return 200 'OK';
                  add_header Content-Type "text/plain";
                }

                location / {
                    proxy_pass         http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header   Upgrade \$http_upgrade;
                    proxy_set_header   Connection 'upgrade';
                    proxy_set_header   Host \$host;
                    proxy_set_header   X-Real-IP \$remote_addr;
                    proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF

            # Stop and remove existing containers (Docker Compose v2 style)
            cd /home/${{ vars.LIGHTSAIL_USERNAME }}
            sudo docker compose down || true
            sudo docker rmi ${{ vars.DOCKERHUB_USERNAME }}/foodwars-app:latest || true

            # Reload NGINX
            sudo nginx -t
            sudo systemctl reload nginx

            # Pull and start
            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/foodwars-app:latest
            sudo docker compose up -d
